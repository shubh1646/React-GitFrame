{"version":3,"sources":["components/Search.js","components/userCard.js","components/RepoCard.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","username","handleUserNameChange","e","value","target","setState","fetchData","this","props","className","type","class","onChange","name","placeholder","aria-label","aria-describedby","onClick","id","React","Component","UserCARD","user","date","created_at","substring","src","avatar_url","company","bio","RepoCard","repo","href","html_url","stargazers_count","watchers_count","undefined","language","App","repos","userdataError","reposError","loading","page","fetchingRepos","handleScroll","currentScroll","window","scrollY","maxScroll","document","documentElement","scrollHeight","clientHeight","public_repos","loadMore","fetchUserData","a","fetch","res","ok","json","data","error","message","fetchRepos","Promise","all","login","addEventListener","removeEventListener","map","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.0cd1031f.chunk.js","sourcesContent":["import React from 'react'\n\nclass Search extends React.Component {\n    state = {\n        username: \"\"\n       \n    };\n\n\n\n\n\n\n    handleUserNameChange = e => {\n        const value = e.target.value;\n        this.setState({\n            username: value\n        });\n    };\n\n\n\n\n\n    render() {\n\n\n       \n         const {fetchData} = this.props\n         const { username } = this.state;\n         \n        return (\n\n           \n\n            <div className=\"container py-5\">\n\n                <div className=\"col-md-4 offset-md-4\">\n\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" class=\"form-control \"  onChange={this.handleUserNameChange} name=\"username\" placeholder=\"Github username\" aria-label=\"Github's username\" aria-describedby=\"button-addon2\" />\n                        <div className=\"input-group-append\">\n                            <button  onClick={()=>fetchData(username)} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Search</button>\n                        </div>\n\n                    </div>\n                </div>\n\n\n\n            </div>\n        );\n    }\n}\n\n\nexport default Search;\n","import React from 'react'\n\n\nconst UserCARD = ({ user }) => {\n   \n    const date = user.created_at.substring(0,4);\n    \n    return (\n        <div className=\"card w-50 offset-md-3 text-white bg-dark mb-3 \">\n      <div className=\"card-body\">\n        <div className=\"d-flex\">\n          <img className=\"img-round user-image mr-5\" src={user.avatar_url} />\n          <div>\n            <h1>{user.name}</h1>\n            <p className=\"mb-0 font-italic\">{user.company}</p>\n            <p className=\"mb-0\">{user.bio}</p>\n            <p className=\"mb-0\"> User Since : {date}</p>\n          </div>\n        </div> \n      </div>\n    </div>\n    )\n    \n    \n    \n    \n    \n    \n    \n    \n    \n}\n\nexport default UserCARD","import React from 'react';\n\nconst RepoCard  = ({repo}) =>(\n   \n<div className=\"card border-secondary mb-3 w-50  offset-md-3 \" >\n    <div className=\"card-body   text-secondary offset-md-4\">\n        <a href ={repo.html_url} target=\"_blank\">\n        <h3>{repo.name}</h3>\n        \n       \n        <p>\n          <strong>Stars:</strong> {repo.stargazers_count}\n        </p>\n        <p>\n          <strong>Watchers:</strong> {repo.watchers_count}\n          </p>\n          { repo.language!=undefined  && ( <p><strong>Language : </strong>{repo.language}</p>)}\n        </a>\n    </div>\n</div>\n);\n\nexport default RepoCard","import React from 'react';\n\nimport './App.css';\nimport Search from './components/Search'\nimport UserCard from './components/userCard'\nimport RepoCard from './components/RepoCard';\n\n\n//Total repos shared per page\nconst PAGE_SIZE = 10;\n\nclass App extends React.Component {\n\n  state = {\n    user: null,\n    repos: [],\n    userdataError: null,\n    reposError: null,\n    loading: false,\n    page: 1,\n    fetchingRepos: false,\n  };\n\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillMount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  //we need two values current scroll pos max scroll pos\n  handleScroll = () => {\n    const currentScroll = window.scrollY;\n    const maxScroll = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n   const {page,user} = this.state\n    if ( user && maxScroll - currentScroll <= 100 &&\n     \n     page*PAGE_SIZE < user.public_repos) this.loadMore();\n  }\n\n\n  fetchUserData = async (username) => {\n    const res = await fetch(`https://api.github.com/users/${username}`)\n    if (res.ok) {\n\n      const data = await res.json();\n      return { data };\n    }\n\n    const error = (await res.json()).message;\n    return { error };\n\n  }\n\n\n  fetchRepos = async (username) => {\n    const { page } = this.state;\n    const res = await fetch(`https://api.github.com/users/${username}/repos?page=${page}&per_page=${PAGE_SIZE}`);\n\n    if (res.ok) {\n\n      const data = await res.json();\n      return { data, page: page + 1 };\n    }\n\n    const error = (await res.json()).message;\n    return { error };\n\n  }\n\n\n\n\n  fetchData = async username => {\n    this.setState({ loading: true }, async () => {\n      try {\n        const [user, repos] = await Promise.all(\n          [\n            this.fetchUserData(username),\n            this.fetchRepos(username),\n\n          ]);\n\n        if (user.data !== undefined && repos.data !== undefined) {\n\n          return this.setState({\n            user: user.data,\n            repos: repos.data,\n            loading: false,\n            userdataError: null,\n            reposError: null,\n            page: repos.page\n\n          });\n        }\n        this.setState({\n          userdataError: user.error,\n          reposError: repos.error,\n          loading: false\n        });\n      }\n      catch (err) {\n        this.setState({\n          error: \"There was some error\",\n          loading: false\n        });\n      }\n\n\n\n    });\n\n\n\n    //fetch github api\n\n  };\n\n\n  /// we using function here because there cabn be inconsistancy in upation of repos \n\n  loadMore = async () => {\n    if (this.state.fetchingRepos == true) return;\n\n    this.setState({ fetchingRepos: true }, async () => {\n      const { repos } = this.state;\n      const { data, page } = await this.fetchRepos(this.state.user.login);\n      if (data)\n        this.setState(state => ({\n          page,\n          repos: [...repos, ...data],\n          fetchingRepos: false\n        }));\n\n    })\n\n  };\n\n  render() {\n    const { userdataError, reposError, loading, user, repos, page } = this.state;\n    //we decide should be show loader button or not\n    // const hasNextPage = page*PAGE_SIZE >= user.public_repos;\n\n\n\n    return (\n      <div>\n        <Search fetchData={this.fetchData} />\n        {loading && <p>Loading .....</p>}\n        {userdataError && <p className=\"text-danger\">{userdataError}</p>}\n        {!loading && !userdataError && user && <UserCard user={user} />}\n        {reposError && <p className=\"text-danger\">{reposError}</p>}\n        {!loading && !reposError && repos.map(repo => <RepoCard key={repo.id} repo={repo} />)}\n\n        {!loading && !userdataError && user && (page - 10) * PAGE_SIZE < user.public_repos && (\n          < button className=\"btn btn-success\" onClick={this.loadMore}>Load More\n          </button>\n        )}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}